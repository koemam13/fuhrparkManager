/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import data.Car;
import dialogWindows.AddDialog;
import dialogWindows.DetailsDialog;
import dialogWindows.PrintDetails;
import dialogWindows.SaveAndClose;
import dialogWindows.showDetails;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.WindowEvent;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import tableModel.CarsTableModel;


/**
 *
 * @author imperatus
 */
public class MainGui extends javax.swing.JFrame
{

  private final CarsTableModel model = new CarsTableModel();


  static File f;
  static int rv;


  /**
   * Creates new form MainGui
   */
  public MainGui ()
  {
    initComponents();
    jtCars.setModel(model);
    setMinimumSize(new Dimension(1500, 200));

  }


  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints;

    jPanel1 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jtCars = new javax.swing.JTable();
    jPanel2 = new javax.swing.JPanel();
    jPanel3 = new javax.swing.JPanel();
    jbAdd = new javax.swing.JButton();
    jbDel = new javax.swing.JButton();
    jPanel5 = new javax.swing.JPanel();
    jbDetails = new javax.swing.JButton();
    jbMakeDetails = new javax.swing.JButton();
    jPanel4 = new javax.swing.JPanel();
    jButton1 = new javax.swing.JButton();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jmSave = new javax.swing.JMenuItem();
    jmRefresh = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jPanel1.setLayout(new java.awt.BorderLayout());

    jtCars.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String []
      {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    jScrollPane1.setViewportView(jtCars);

    jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

    getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

    jPanel2.setLayout(new java.awt.GridLayout(1, 0));

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Hinzufügen o. Löschen"));
    jPanel3.setLayout(new java.awt.GridBagLayout());

    jbAdd.setText("Hinzufügen");
    jbAdd.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jbAddActionPerformed(evt);
      }
    });
    jPanel3.add(jbAdd, new java.awt.GridBagConstraints());

    jbDel.setText("Löschen");
    jbDel.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jbDelActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel3.add(jbDel, gridBagConstraints);

    jPanel2.add(jPanel3);

    jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Details anzeigen"));
    jPanel5.setLayout(new java.awt.GridBagLayout());

    jbDetails.setText("Details anzeigen");
    jbDetails.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jbDetailsActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel5.add(jbDetails, gridBagConstraints);

    jbMakeDetails.setText("Details bearbeiten");
    jbMakeDetails.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jbMakeDetailsActionPerformed(evt);
      }
    });
    jPanel5.add(jbMakeDetails, new java.awt.GridBagConstraints());

    jPanel2.add(jPanel5);

    jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Drucken"));
    jPanel4.setLayout(new java.awt.GridBagLayout());

    jButton1.setText("Details Drucken");
    jButton1.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton1ActionPerformed(evt);
      }
    });
    jPanel4.add(jButton1, new java.awt.GridBagConstraints());

    jPanel2.add(jPanel4);

    getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

    jMenu1.setText("Datei");

    jmSave.setText("Speichern");
    jmSave.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jmSaveActionPerformed(evt);
      }
    });
    jMenu1.add(jmSave);

    jmRefresh.setText("Aktualisieren");
    jmRefresh.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jmRefreshActionPerformed(evt);
      }
    });
    jMenu1.add(jmRefresh);

    jMenuBar1.add(jMenu1);

    setJMenuBar(jMenuBar1);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  /* Add Button
  * creating a new Dialog window which pops up in the mid of the maingui
  * after that grabbing the data out of the dialog window and adding
  * it to my Table model with a return value 0 for costs since those will 
  * be calculated in the Details dialog
  */
  private void jbAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbAddActionPerformed
  {//GEN-HEADEREND:event_jbAddActionPerformed

    AddDialog dlg = new AddDialog(this, true);
    dlg.setMinimumSize(new Dimension(400, 400));
    dlg.setTitle("Eingabefenster");
    dlg.setLocationRelativeTo(this);
    dlg.setVisible(true);
    if (!dlg.isPressedOK())
    {
      return;
    }
    Car c = new Car(dlg.getName(), dlg.getId(), dlg.getKostenstelle(), dlg.getKm(), dlg.getFirstRegistration(), dlg.getlInspection(), dlg.getnInspection(), dlg.getlService(), dlg.getnService(), 0);
    model.add(c);
  }//GEN-LAST:event_jbAddActionPerformed
/* Delete Button
 * Deleting the selected row with a plausibility check => if no row is selected
 * a dialog window will pop up informing the user to select a row.
 */
  private void jbDelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbDelActionPerformed
  {//GEN-HEADEREND:event_jbDelActionPerformed
    int index = jtCars.getSelectedRow();

    if (index <= 0)
    {
      JOptionPane.showMessageDialog(this, "Keine Zeile ausgewählt", "Fehler aufgetreten ...", JOptionPane.ERROR_MESSAGE);
      return;
    }

    model.remove(index);
  }//GEN-LAST:event_jbDelActionPerformed
/* Edit Details button
 * gets the selected rows index and afterward with the index the Car at the selected 
 * position (includes again a plausi check). After that i forward the Car to the Details dialog window and the save 
 * root path to read the Detail file to the selected car (if there exists one).
 * After the ok button of the Dialog window is pressed it grabbs the Object Car
 * out of the dialog and edits the current car (which was selected) due to 
 * possible changes in the Details dailog.
 */
  private void jbMakeDetailsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbMakeDetailsActionPerformed
  {//GEN-HEADEREND:event_jbMakeDetailsActionPerformed
    int index = jtCars.getSelectedRow();

    if (index <= 0)
    {
      JOptionPane.showMessageDialog(this, "Keine Zeile ausgewählt", "Fehler aufgetreten ...", JOptionPane.ERROR_MESSAGE);
      return;
    }

    Car c = model.getCar(index);

    DetailsDialog dlg = new DetailsDialog(this, true);
    dlg.setMinimumSize(new Dimension(800, 800));
    dlg.setTitle("Details");
    dlg.setLocationRelativeTo(this);

    dlg.setFileRoot(f);
    try
    {
      dlg.readFile(c);
    }
    catch (Exception ex)
    {
      java.util.logging.Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
    }
    dlg.setMinimumSize(new Dimension(900, 600));
    dlg.setVisible(true);

    if (!dlg.isPressedOK())
    {
      return;
    }
    Car c2 = dlg.getCar();
    model.set(index, c2);
  }//GEN-LAST:event_jbMakeDetailsActionPerformed
/* Show Details button
 * Gets the selected row index (again plausi check included). after that grabs the object
 * Car with the index of the selected row out of the model and forwards it to the dialog window.
 * if the dialog window gets closed nothing happens
 */
  private void jbDetailsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbDetailsActionPerformed
  {//GEN-HEADEREND:event_jbDetailsActionPerformed
    int index = jtCars.getSelectedRow();

    if (index <= 0)
    {
      JOptionPane.showMessageDialog(this, "Keine Zeile ausgewählt", "Fehler aufgetreten ...", JOptionPane.ERROR_MESSAGE);
      return;
    }

    Car c = model.getCar(index);

    showDetails dlg = new showDetails(this, true);
    dlg.setMinimumSize(new Dimension(700, 500));
    dlg.setLocationRelativeTo(this);
    dlg.setTitle("Details");
    dlg.setRootFile(f);
    try
    {
      dlg.setLabels(c);
    }
    catch (Exception ex)
    {
      JOptionPane.showMessageDialog(this, ex.getMessage(), "Fehler aufgetreten...", JOptionPane.ERROR_MESSAGE);
    }
    dlg.setVisible(true);


  }//GEN-LAST:event_jbDetailsActionPerformed
/* Print the Details
 * Grabs the index of the selected row (plausi check). after that grabbs the Car
 * with the index of the selected row out of the model and forwards it to the PrintDetails
 * dialog window. Also forwards the root location path. dlg.setLabels sets all the Labels 
 * with the Data if smt goes wrong the Exceeption gets caught in the Joptionpane
 * and gets displayed on screen stating the Exception msg. if setLabels worked
 * it will go on and try to print the jFrame. First i set the preformat for the page to
 * default and open the Page format dialog window. then i grabb the Formats set in the
 * page fortmat dialog into the var postformat . after that i check if the user hit cancel 
 * or ok. if he hits cancel it will stopp the printing proceess. if he hits ok it opens the
 * print dialog window where the user has to select which printer and so on.
 * after that it attempts to print the JFrame to the printer with the set Details with a 
 * "Done" message when the print is finished.
 */
  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
  {//GEN-HEADEREND:event_jButton1ActionPerformed
    int index = jtCars.getSelectedRow();

    if (index <= 0)
    {
      JOptionPane.showMessageDialog(this, "Keine Zeile ausgewählt", "Fehler aufgetreten ...", JOptionPane.ERROR_MESSAGE);
      return;
    }

    Car c = model.getCar(index);

    PrintDetails dlg = new PrintDetails(this, true);
    dlg.setMinimumSize(new Dimension(700, 500));
    dlg.setRootFile(f);
    try
    {
      dlg.setLabels(c);
    }
    catch (Exception ex)
    {
      JOptionPane.showMessageDialog(this, ex.getMessage(), "Fehler aufgetreten...", JOptionPane.ERROR_MESSAGE);
    }
    try
    {
      PrinterJob job = PrinterJob.getPrinterJob();
      PageFormat preformat = job.defaultPage();
      preformat.setOrientation(PageFormat.PORTRAIT);
      PageFormat postformat = job.pageDialog(preformat);

      if (preformat != postformat)
      {
        job.setPrintable(new Printer(dlg.getComponent(0)), postformat);
        if (job.printDialog())
        {
          job.print();
          System.out.println("Done");
        }
      }

    }
    catch (Exception ex)
    {

    }
   }//GEN-LAST:event_jButton1ActionPerformed

  /* Save menu
   * starts the save method written below
   */
  private void jmSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jmSaveActionPerformed
  {//GEN-HEADEREND:event_jmSaveActionPerformed
    save();
  }//GEN-LAST:event_jmSaveActionPerformed
/* Refresh menu item
 *  starts the read File method and forwards the filename/path
 * if an error occurs it display a messageDialog window displaying 
 * the issue that occured
 */
  private void jmRefreshActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jmRefreshActionPerformed
  {//GEN-HEADEREND:event_jmRefreshActionPerformed
    try
    {
      readFile(new BufferedReader(new FileReader(new File(f + File.separator + "save.dat"))));
    }
    catch (FileNotFoundException ex)
    {
      JOptionPane.showMessageDialog(this, "Fehler konnte Dateien nicht einlesen", "Fehler aufgetreten", JOptionPane.ERROR_MESSAGE);
    }
  }//GEN-LAST:event_jmRefreshActionPerformed


  /**
   * @param args the command line arguments
   */
  
  
  /* Main 
   *  in the main metho i check if there is a saveRoot file which contains the path to the
   * Data save directory or if not. if there is no save directory file in the Directory where
   * the programm is initialized it will open a dialog window where the user can select the 
   * directory where the data files will be saved. after the user selected the directory it will
   * write the path of that directory into a file into the directory where the programm was initialized
   * . if there is already a save path file in the programs directory it will read the file and set the 
   * File f (global var) to path which is in the file. after that the programm looks if there already exists
   * a save file in the save file directory if so it will read in the file and set the Table's contents
   * 
   */
  public static void main (String args[]) throws IOException, ClassNotFoundException
  {


    /*
     * Set the Nimbus look and feel
     */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /*
     * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. For details see
     * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /*
     * Create and display the form
     */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run ()
      {
        MainGui main = new MainGui();
        main.addWindowListener(new java.awt.event.WindowAdapter()
        {
          @Override
          public void windowClosing (WindowEvent e)
          {
            SaveAndClose dlg = new SaveAndClose(null, true);
            dlg.setVisible(true);
            if(dlg.isWantSave())
              main.save();
            System.exit(0);
            
          }
          
        });
        

        String s = null;
        try
        {
          s = new File(".").getCanonicalPath();
        }
        catch (IOException ex)
        {
          JOptionPane.showMessageDialog(null, ex.getMessage(), "Fehler aufgetreten", JOptionPane.ERROR_MESSAGE);
        }

        if (s != null)
        {

          File root = new File(s + File.separator + "test.dat");
          if (root.exists())
          {

            try
            {
              String p = null;

              BufferedReader r = new BufferedReader(new FileReader(root));

              p = r.readLine();

              f = new File(p);


              File x = new File(p + File.separator + "save.dat");
              if (x.exists())
              {

                main.readFile(new BufferedReader(new FileReader(x)));
              }
            }
            catch (IOException iOException)
            {
              JOptionPane.showMessageDialog(null, iOException.getCause(), "Fehler aufgetreten", JOptionPane.ERROR_MESSAGE);
            }
          }
          if (!root.exists())
          {
            try
            {

              File x = main.openFile();

              File i = new File(s + File.separator + "test.dat");

              BufferedWriter w = new BufferedWriter(new FileWriter(i));


              w.write(x.getAbsolutePath());
              w.newLine();
              w.flush();

              File p = new File(x.getAbsolutePath() + File.separator + "save.dat");
              System.out.println(p.getAbsolutePath() + "     " + p.getName());
              if (p.exists())
              {
                main.readFile(new BufferedReader(new FileReader(p)));
              }
            }
            catch (IOException iOException)
            {
            }
          }
        }
         main.setVisible(true);

      }
    });


  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JButton jbAdd;
  private javax.swing.JButton jbDel;
  private javax.swing.JButton jbDetails;
  private javax.swing.JButton jbMakeDetails;
  private javax.swing.JMenuItem jmRefresh;
  private javax.swing.JMenuItem jmSave;
  private javax.swing.JTable jtCars;
  // End of variables declaration//GEN-END:variables

  
  /* Save method
   * saves the Tables contents into the save.dat file in the installation directory
   * if there goes smt wrong there will be a showMessage dialog window apear
   * informing the user that smt went wron during the process of writting the file
   */
  private void save ()
  {
    try (BufferedWriter w = new BufferedWriter(new FileWriter(f + File.separator + "save.dat")))
    {
      model.write(w);
    }
    catch (Exception ex)
    {
      ex.printStackTrace(System.err);
      JOptionPane.showMessageDialog(this, "Datei kann nicht geschrieben werden",
                                    "Fehler",
                                    JOptionPane.ERROR_MESSAGE);
    }    // TODO add your handling code here:
  }

/* open File methos
 *  this method will be use if there is no set root directory
 *  it will open a chooser window and return the selected directory
 */
  
  private File openFile ()
  {
    File ez = null;
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);


    FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Bitte das Installations Verzeichnis auswählen.", "csv");
    chooser.setFileFilter(filter);
    int showSaveDialog;
    showSaveDialog = chooser.showSaveDialog(null);

    return ez = chooser.getSelectedFile();
  }
  
  /* read File method
   * it reads the given r and insert the contents of the file into the tablemodel
   * if a error occurs it will diplay the exception msg in a showMessage Dialog
   */


  private void readFile (BufferedReader r)
  {
    try
    {
      model.read(r);
    }
    catch (Exception e)
    {
      JOptionPane.showMessageDialog(this, e.getMessage(), "Fehler aufgetreten", JOptionPane.ERROR_MESSAGE);
      System.err.print(e);
      e.printStackTrace(System.out);

    }

  }

/* Printer
 * this method was found at https://stackoverflow.com/questions/12764634/printing-a-jframe-and-its-components
 * the printer gets the component/JFrame
 * the methos print checks if the page_index is < 0 if so it retuns Printable.NO_SUCH_PAGE
 * if it went through the check it gets the component size and the page size. afterwards it checks
 * the orientation of the Print (Portrait / Landscape) and scales the immage to the given
 * orientation. Afte the scaling it starts the print job and returns Printable.PAGE_EXIT
 */
  public static class Printer implements Printable
  {

    final Component comp;


    public Printer (Component comp)
    {
      this.comp = comp;
    }


    @Override
    public int print (Graphics g, PageFormat format, int page_index)
            throws PrinterException
    {
      if (page_index > 0)
      {
        return Printable.NO_SUCH_PAGE;
      }

      // get the bounds of the component
      Dimension dim = comp.getSize();
      double cHeight = dim.getHeight();
      double cWidth = dim.getWidth();

      // get the bounds of the printable area
      double pHeight = format.getImageableHeight();
      double pWidth = format.getImageableWidth();

      double pXStart = format.getImageableX();
      double pYStart = format.getImageableY();

      double xRatio = pWidth / cWidth;
      double yRatio = pHeight / cHeight;


      Graphics2D g2 = (Graphics2D) g;
      g2.translate(pXStart, pYStart);


      if (format.getOrientation() == PageFormat.PORTRAIT)
      {
        g2.scale(xRatio, xRatio);
      }
      if (format.getOrientation() == PageFormat.LANDSCAPE || format.getOrientation() == PageFormat.REVERSE_LANDSCAPE)
      {
        g2.scale(yRatio, yRatio);
      }
      comp.paint(g);

      return Printable.PAGE_EXISTS;
    }
  }
}
