/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import data.Car;
import dialogWindows.AddDialog;
import dialogWindows.DetailsDialog;
import dialogWindows.PrintDetails;
import dialogWindows.showDetails;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import tableModel.CarsTableModel;


/**
 *
 * @author imperatus
 */
public class MainGui extends javax.swing.JFrame
{

  private final CarsTableModel model = new CarsTableModel();


  static File f;
  static int rv;


  /**
   * Creates new form MainGui
   */
  public MainGui ()
  {
    initComponents();
    jtCars.setModel(model);
    setMinimumSize(new Dimension(1500, 200));

  }


  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints;

    jPanel1 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jtCars = new javax.swing.JTable();
    jPanel2 = new javax.swing.JPanel();
    jPanel3 = new javax.swing.JPanel();
    jbAdd = new javax.swing.JButton();
    jbDel = new javax.swing.JButton();
    jPanel5 = new javax.swing.JPanel();
    jbDetails = new javax.swing.JButton();
    jbMakeDetails = new javax.swing.JButton();
    jPanel4 = new javax.swing.JPanel();
    jButton1 = new javax.swing.JButton();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jmSave = new javax.swing.JMenuItem();
    jmRefresh = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jPanel1.setLayout(new java.awt.BorderLayout());

    jtCars.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String []
      {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    jtCars.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        jtCarsMouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(jtCars);

    jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

    getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

    jPanel2.setLayout(new java.awt.GridLayout(1, 0));

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Hinzufügen o. Löschen"));
    jPanel3.setLayout(new java.awt.GridBagLayout());

    jbAdd.setText("Hinzufügen");
    jbAdd.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jbAddActionPerformed(evt);
      }
    });
    jPanel3.add(jbAdd, new java.awt.GridBagConstraints());

    jbDel.setText("Löschen");
    jbDel.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jbDelActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel3.add(jbDel, gridBagConstraints);

    jPanel2.add(jPanel3);

    jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Details anzeigen"));
    jPanel5.setLayout(new java.awt.GridBagLayout());

    jbDetails.setText("Details anzeigen");
    jbDetails.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jbDetailsActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel5.add(jbDetails, gridBagConstraints);

    jbMakeDetails.setText("Details bearbeiten");
    jbMakeDetails.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jbMakeDetailsActionPerformed(evt);
      }
    });
    jPanel5.add(jbMakeDetails, new java.awt.GridBagConstraints());

    jPanel2.add(jPanel5);

    jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Drucken"));
    jPanel4.setLayout(new java.awt.GridBagLayout());

    jButton1.setText("Details Drucken");
    jButton1.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton1ActionPerformed(evt);
      }
    });
    jPanel4.add(jButton1, new java.awt.GridBagConstraints());

    jPanel2.add(jPanel4);

    getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

    jMenu1.setText("Datei");

    jmSave.setText("Speichern");
    jmSave.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jmSaveActionPerformed(evt);
      }
    });
    jMenu1.add(jmSave);

    jmRefresh.setText("Aktualisieren");
    jmRefresh.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jmRefreshActionPerformed(evt);
      }
    });
    jMenu1.add(jmRefresh);

    jMenuBar1.add(jMenu1);

    setJMenuBar(jMenuBar1);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jbAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbAddActionPerformed
  {//GEN-HEADEREND:event_jbAddActionPerformed

    AddDialog dlg = new AddDialog(this, true);
    dlg.setMinimumSize(new Dimension(400, 400));
    dlg.setTitle("Eingabefenster");
    dlg.setVisible(true);
    if (!dlg.isPressedOK())
    {
      return;
    }
    Car c = new Car(dlg.getName(), dlg.getId(), dlg.getKostenstelle(), dlg.getKm(), dlg.getFirstRegistration(), dlg.getlInspection(), dlg.getnInspection(), dlg.getlService(), dlg.getnService(), 0);
    model.add(c);
  }//GEN-LAST:event_jbAddActionPerformed

  private void jbDelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbDelActionPerformed
  {//GEN-HEADEREND:event_jbDelActionPerformed
    int index = jtCars.getSelectedRow();

    if (index <= 0)
    {
      JOptionPane.showMessageDialog(this, "Keine Zeile ausgewählt", "Fehler aufgetreten ...", JOptionPane.ERROR_MESSAGE);
      return;
    }

    model.remove(index);
  }//GEN-LAST:event_jbDelActionPerformed

  private void jtCarsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jtCarsMouseClicked
  {//GEN-HEADEREND:event_jtCarsMouseClicked

  }//GEN-LAST:event_jtCarsMouseClicked

  private void jbMakeDetailsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbMakeDetailsActionPerformed
  {//GEN-HEADEREND:event_jbMakeDetailsActionPerformed
    int index = jtCars.getSelectedRow();

    if (index <= 0)
    {
      JOptionPane.showMessageDialog(this, "Keine Zeile ausgewählt", "Fehler aufgetreten ...", JOptionPane.ERROR_MESSAGE);
      return;
    }

    Car c = model.getCar(index);

    DetailsDialog dlg = new DetailsDialog(this, true);

    dlg.setFileRoot(f);
    try
    {
      dlg.readFile(c);
    }
    catch (Exception ex)
    {
      java.util.logging.Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
    }
    dlg.setMinimumSize(new Dimension(900, 600));
    dlg.setVisible(true);

    if (!dlg.isPressedOK())
    {
      return;
    }
    Car c2 = dlg.getCar();
    model.set(index, c2);
  }//GEN-LAST:event_jbMakeDetailsActionPerformed

  private void jbDetailsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbDetailsActionPerformed
  {//GEN-HEADEREND:event_jbDetailsActionPerformed
    int index = jtCars.getSelectedRow();

    if (index <= 0)
    {
      JOptionPane.showMessageDialog(this, "Keine Zeile ausgewählt", "Fehler aufgetreten ...", JOptionPane.ERROR_MESSAGE);
      return;
    }

    Car c = model.getCar(index);

    showDetails dlg = new showDetails(this, true);
    dlg.setMinimumSize(new Dimension(700, 500));
    dlg.setRootFile(f);
    try
    {
      dlg.setLabels(c);
    }
    catch (Exception ex)
    {
      JOptionPane.showMessageDialog(this, ex.getMessage(), "Fehler aufgetreten...", JOptionPane.ERROR_MESSAGE);
    }
    dlg.setVisible(true);


  }//GEN-LAST:event_jbDetailsActionPerformed

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
  {//GEN-HEADEREND:event_jButton1ActionPerformed
    int index = jtCars.getSelectedRow();

    if (index <= 0)
    {
      JOptionPane.showMessageDialog(this, "Keine Zeile ausgewählt", "Fehler aufgetreten ...", JOptionPane.ERROR_MESSAGE);
      return;
    }

    Car c = model.getCar(index);

    PrintDetails dlg = new PrintDetails(this, true);
    dlg.setMinimumSize(new Dimension(700, 500));
    dlg.setRootFile(f);
    try
    {
      dlg.setLabels(c);
    }
    catch (Exception ex)
    {
      JOptionPane.showMessageDialog(this, ex.getMessage(), "Fehler aufgetreten...", JOptionPane.ERROR_MESSAGE);
    }
    try
    {
      PrinterJob job = PrinterJob.getPrinterJob();
      PageFormat preformat = job.defaultPage();
      preformat.setOrientation(PageFormat.PORTRAIT);
      PageFormat postformat = job.pageDialog(preformat);

      if (preformat != postformat)
      {
        job.setPrintable(new Printer(dlg.getComponent(0)), postformat);
        if (job.printDialog())
        {
          job.print();
        }
      }

    }
    catch (Exception ex)
    {

    }
   }//GEN-LAST:event_jButton1ActionPerformed

  private void jmSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jmSaveActionPerformed
  {//GEN-HEADEREND:event_jmSaveActionPerformed
    save();
  }//GEN-LAST:event_jmSaveActionPerformed

  private void jmRefreshActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jmRefreshActionPerformed
  {//GEN-HEADEREND:event_jmRefreshActionPerformed
    try
    {
      readFile(new BufferedReader(new FileReader(new File(f + File.separator + "save.dat"))));
    }
    catch (FileNotFoundException ex)
    {
      JOptionPane.showMessageDialog(this, "Fehler konnet Dateien nicht einlesen", "Fehler aufgetreten", JOptionPane.ERROR_MESSAGE);
    }
  }//GEN-LAST:event_jmRefreshActionPerformed


  /**
   * @param args the command line arguments
   */
  public static void main (String args[]) throws IOException, ClassNotFoundException
  {


    /*
     * Set the Nimbus look and feel
     */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /*
     * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. For details see
     * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /*
     * Create and display the form
     */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run ()
      {
        MainGui main = new MainGui();
        main.setVisible(true);

        String s = null;
        try
        {
          s = new File(".").getCanonicalPath();
        }
        catch (IOException ex)
        {
          JOptionPane.showMessageDialog(null, ex.getMessage(), "Fehler aufgetreten", JOptionPane.ERROR_MESSAGE);
        }

        if (s != null)
        {

          File root = new File(s + File.separator + "test.dat");
          if (root.exists())
          {

            try
            {
              String p = null;

              BufferedReader r = new BufferedReader(new FileReader(root));

              p = r.readLine();

              f = new File(p);


              File x = new File(p + File.separator + "save.dat");
              if (x.exists())
              {

                main.readFile(new BufferedReader(new FileReader(x)));
              }
            }
            catch (IOException iOException)
            {
              JOptionPane.showMessageDialog(null, iOException.getCause(), "Fehler aufgetreten", JOptionPane.ERROR_MESSAGE);
            }
          }
          if (!root.exists())
          {
            try
            {

              File x = main.openFile();

              File i = new File(s + File.separator + "rootPath.dat");

              BufferedWriter w = new BufferedWriter(new FileWriter(i));


              w.write(x.getAbsolutePath());
              w.newLine();
              w.flush();

              File p = new File(x.getAbsolutePath() + File.separator + "save.dat");
              System.out.println(p.getAbsolutePath() + "     " + p.getName());
              if (p.exists())
              {
                main.readFile(new BufferedReader(new FileReader(p)));
              }
            }
            catch (IOException iOException)
            {
            }
          }
        }


      }
    });


  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JButton jbAdd;
  private javax.swing.JButton jbDel;
  private javax.swing.JButton jbDetails;
  private javax.swing.JButton jbMakeDetails;
  private javax.swing.JMenuItem jmRefresh;
  private javax.swing.JMenuItem jmSave;
  private javax.swing.JTable jtCars;
  // End of variables declaration//GEN-END:variables

  private void save ()
  {
    try (BufferedWriter w = new BufferedWriter(new FileWriter(f + File.separator + "save.dat")))
    {
      model.write(w);
    }
    catch (Exception ex)
    {
      ex.printStackTrace(System.err);
      JOptionPane.showMessageDialog(this, "Datei kann nicht geschrieben werden",
                                    "Fehler",
                                    JOptionPane.ERROR_MESSAGE);
    }    // TODO add your handling code here:
  }


  private File openFile ()
  {
    File ez = null;
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);


    FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Bitte das Installations Verzeichnis auswählen.", "csv");
    chooser.setFileFilter(filter);
    int showSaveDialog;
    showSaveDialog = chooser.showSaveDialog(null);

    return ez = chooser.getSelectedFile();
  }


  private void readFile (BufferedReader r)
  {
    try
    {
      model.read(r);
    }
    catch (Exception e)
    {
      JOptionPane.showMessageDialog(this, e.getMessage(), "Fehler aufgetreten", JOptionPane.ERROR_MESSAGE);
      System.err.print(e);
      e.printStackTrace(System.out);

    }

  }


  public static class Printer implements Printable
  {

    final Component comp;


    public Printer (Component comp)
    {
      this.comp = comp;
    }


    @Override
    public int print (Graphics g, PageFormat format, int page_index)
            throws PrinterException
    {
      if (page_index > 0)
      {
        return Printable.NO_SUCH_PAGE;
      }

      // get the bounds of the component
      Dimension dim = comp.getSize();
      double cHeight = dim.getHeight();
      double cWidth = dim.getWidth();

      // get the bounds of the printable area
      double pHeight = format.getImageableHeight();
      double pWidth = format.getImageableWidth();

      double pXStart = format.getImageableX();
      double pYStart = format.getImageableY();

      double xRatio = pWidth / cWidth;
      double yRatio = pHeight / cHeight;


      Graphics2D g2 = (Graphics2D) g;
      g2.translate(pXStart, pYStart);


      if (format.getOrientation() == PageFormat.PORTRAIT)
      {
        g2.scale(xRatio, xRatio);
      }
      if (format.getOrientation() == PageFormat.LANDSCAPE || format.getOrientation() == PageFormat.REVERSE_LANDSCAPE)
      {
        g2.scale(yRatio, yRatio);
      }
      comp.paint(g);

      return Printable.PAGE_EXISTS;
    }
  }
}
